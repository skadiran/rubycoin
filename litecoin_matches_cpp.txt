bitcoin-cli.cpp:                  "  litecoin-cli [options] <command> [params]  " + strprintf(_("Send command to %s"), _(PACKAGE_NAME)) + "\n" +
bitcoin-cli.cpp:                  "  litecoin-cli [options] -named <command> [name=value] ... " + strprintf(_("Send command to %s (with named arguments)"), _(PACKAGE_NAME)) + "\n" +
bitcoin-cli.cpp:                  "  litecoin-cli [options] help                " + _("List commands") + "\n" +
bitcoin-cli.cpp:                  "  litecoin-cli [options] help <command>      " + _("Get help for a command") + "\n";
bitcoind.cpp:                  "  litecoind [options]                     " + strprintf(_("Start %s Daemon"), _(PACKAGE_NAME)) + "\n";
bitcoind.cpp:                fprintf(stderr, "Error: Command line contains unexpected token '%s', see litecoind -h for a list of options.\n", argv[i]);
bitcoind.cpp:            fprintf(stdout, "Litecoin server starting\n");
bitcoin-tx.cpp:        std::string strUsage = strprintf(_("%s litecoin-tx utility version"), _(PACKAGE_NAME)) + " " + FormatFullVersion() + "\n\n" +
bitcoin-tx.cpp:              "  litecoin-tx [options] <hex-tx> [commands]  " + _("Update hex-encoded litecoin transaction") + "\n" +
bitcoin-tx.cpp:              "  litecoin-tx [options] -create [commands]   " + _("Create hex-encoded litecoin transaction") + "\n" +
chainparams.cpp:        vSeeds.emplace_back("seed-a.litecoin.loshan.co.uk", true);
chainparams.cpp:        vSeeds.emplace_back("dnsseed.litecointools.com", true);
chainparams.cpp:        vSeeds.emplace_back("dnsseed.litecoinpool.org", true);
chainparams.cpp:        vSeeds.emplace_back("testnet-seed.litecointools.com", true);
chainparams.cpp:        vSeeds.emplace_back("seed-b.litecoin.loshan.co.uk", true);
clientversion.cpp:const std::string CLIENT_NAME("LitecoinCore");
init.cpp:    const std::string URL_SOURCE_CODE = "<https://github.com/litecoin-project/litecoin>";
init.cpp:    const std::string URL_WEBSITE = "<https://litecoin.org>";
init.cpp:    LogPrintf("Litecoin version %s\n", FormatFullVersion());
net.cpp:        std::string strDesc = "Litecoin " + FormatFullVersion();
net_processing.cpp:# error "Litecoin cannot be compiled without assertions."
pow.cpp:    // Litecoin: This fixes an issue where a 51% attack can change difficulty at will.
pow.cpp:    // Litecoin: intermediate uint256 can overflow by 1 bit
txdb.cpp:                // Litecoin: Disable PoW Sanity check while loading block index from disk.
txdb.cpp:                // requires recomputing every PoW hash during every Litecoin startup.
util.cpp:const char * const BITCOIN_CONF_FILENAME = "litecoin.conf";
util.cpp:const char * const BITCOIN_PID_FILENAME = "litecoin.pid";
util.cpp:    const char* pszModule = "litecoin";
util.cpp:    return GetSpecialFolderPath(CSIDL_APPDATA) / "Litecoin";
util.cpp:    return pathRet / "Library/Application Support/Litecoin";
util.cpp:    return pathRet / ".litecoin";
validation.cpp:# error "Litecoin cannot be compiled without assertions."
validation.cpp:const std::string strMessageMagic = "Litecoin Signed Message:\n";
